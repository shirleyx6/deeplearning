
# coding: utf-8

# # read & display picture

# In[1]:


import cv2#新的OpenCV的接口中没有CreateImage接口
import numpy as np#要创建图像，需要使用numpy的函数


# In[ ]:


img=cv2.imread('E:/OpenCV/pic3.png')
cv2.namedWindow('Image')
cv2.imshow('Image',img)
cv2.waitKey(0)#如果不添这一句，在IDLE中执行窗口直接无响应。在命令行中执行的话，则是一闪而过。


# In[ ]:


cv2.imwrite("E:/OpenCV/pic3_1.png", img)#save


# # face recognition

# In[29]:


import cv2
import numpy as np

# 运行之前，检查cascade文件路径是否在相应的目录下
face_cascade = cv2.CascadeClassifier('E:/OpenCV/haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier('E:/OpenCV/haarcascade_eye.xml') 

img =cv2.imread('E:/OpenCV/like.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)#转换成灰度的图片的计算强度得以降低。

# 检测脸部
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=2, minSize=(1, 1), flags=cv2.CASCADE_SCALE_IMAGE)
print('Detected ', len(faces), " face")

for (x, y, w, h) in faces:
    img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
    roi_gray = gray[y: y + h, x: x + w]
    roi_color = img[y: y + h, x: x + w]
    
    eyes = eye_cascade.detectMultiScale(roi_gray)
    for(ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)#最后一个参数指定的就是画笔的大小

cv2.imshow('img', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
#cv2.imwrite("E:/OpenCV/like_1.png", img)#save


# In[50]:


os.getcwd()


# # obD

# In[54]:


from imageai.Detection import ObjectDetection
#import os

#execution_path = os.getcwd()
execution_path ='E:/OpenCV'

detector = ObjectDetection()
detector.setModelTypeAsRetinaNet()#将模型类型设置为RetinaNet
#将模型的路径设为RetinaNet模型文件所在路径
detector.setModelPath( os.path.join(execution_path , "resnet50_coco_best_v2.0.1.h5"))
detector.loadModel()
#将检测到的每个目标的图片单独提取出来
detections = detector.detectObjectsFromImage(input_image=os.path.join(execution_path , "ob2.png"),
                                             output_image_path=os.path.join(execution_path , "ob2_new.png"))#, extract_detected_objects=True)

for eachObject in detections:
    print(eachObject["name"]+":"+eachObject["percentage_probability"])


# # videos

# In[22]:


import os
import cv2

videos_src_path = "E:/OpenCV/videos/"
video_formats = [".mp4"]
frames_save_path = "E:/OpenCV/videos/"
width = 320
height = 240
time_interval = 50


def video2frame(videos_src_path, video_formats, frames_save_path, width, height, time_interval):
    """
    将视频按固定间隔读取写入图片
    :param video_src_path: 视频存放路径
    :param formats:　包含的所有视频格式
    :param frame_save_path:　保存路径
    :param frame_width:　保存帧宽
    :param frame_height:　保存帧高
    :param interval:　保存帧间隔
    :return:　帧图片
    """
    videos = os.listdir(videos_src_path)

    def filter_format(x, all_formats):
        if x[-4:] in all_formats:
            return True
        else:
            return False

    videos = filter(lambda x: filter_format(x, video_formats), videos)

    for each_video in videos:
        print ("正在读取视频：", each_video)

        each_video_name = each_video[:-4]
        os.mkdir(frames_save_path + each_video_name)#创建帧的文件夹
        each_video_save_full_path = os.path.join(frames_save_path, each_video_name) + "/"

        each_video_full_path = os.path.join(videos_src_path, each_video)

        cap = cv2.VideoCapture(each_video_full_path)
        frame_index = 0
        frame_count = 0
        if cap.isOpened():
            success = True
        else:
            success = False
            print("读取失败!")

        while(success):
            success, frame = cap.read()
            print ("---> 正在读取第%d帧:" % frame_index, success)

            if frame_index % time_interval == 0:#控制输出图片张数
                #size=(width,height)
                resize_frame = cv2.resize(frame, (width, height), interpolation=cv2.INTER_AREA)
                # cv2.imwrite(each_video_save_full_path + each_video_name + "_%d.jpg" % frame_index, resize_frame)
                cv2.imwrite(each_video_save_full_path + "%d.jpg" % frame_count, resize_frame)
                frame_count += 1

            frame_index += 1

        cap.release()
    
if __name__ == '__main__':
    video2frame(videos_src_path, video_formats, frames_save_path, width, height, time_interval)

